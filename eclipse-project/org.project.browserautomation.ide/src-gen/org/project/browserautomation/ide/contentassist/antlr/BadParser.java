/*
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.project.browserautomation.ide.contentassist.antlr.internal.InternalBadParser;
import org.project.browserautomation.services.BadGrammarAccess;

public class BadParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BadGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BadGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getCheckExistsAccess().getAlternatives(), "rule__CheckExists__Alternatives");
			builder.put(grammarAccess.getClickOnAccess().getAlternatives(), "rule__ClickOn__Alternatives");
			builder.put(grammarAccess.getClickOnAccess().getAlternatives_0_2(), "rule__ClickOn__Alternatives_0_2");
			builder.put(grammarAccess.getCheckboxActionAccess().getAlternatives_2(), "rule__CheckboxAction__Alternatives_2");
			builder.put(grammarAccess.getFillFieldAccess().getAlternatives_4(), "rule__FillField__Alternatives_4");
			builder.put(grammarAccess.getStoreElementAccess().getAlternatives(), "rule__StoreElement__Alternatives");
			builder.put(grammarAccess.getClickTypeAccess().getAlternatives(), "rule__ClickType__Alternatives");
			builder.put(grammarAccess.getElemTypeAccess().getAlternatives(), "rule__ElemType__Alternatives");
			builder.put(grammarAccess.getBoolStringAccess().getAlternatives(), "rule__BoolString__Alternatives");
			builder.put(grammarAccess.getNavigateToUrlAccess().getGroup(), "rule__NavigateToUrl__Group__0");
			builder.put(grammarAccess.getCheckExistsAccess().getGroup_0(), "rule__CheckExists__Group_0__0");
			builder.put(grammarAccess.getCheckExistsAccess().getGroup_1(), "rule__CheckExists__Group_1__0");
			builder.put(grammarAccess.getClickOnAccess().getGroup_0(), "rule__ClickOn__Group_0__0");
			builder.put(grammarAccess.getClickOnAccess().getGroup_0_2_1(), "rule__ClickOn__Group_0_2_1__0");
			builder.put(grammarAccess.getClickOnAccess().getGroup_1(), "rule__ClickOn__Group_1__0");
			builder.put(grammarAccess.getClickOnAccess().getGroup_2(), "rule__ClickOn__Group_2__0");
			builder.put(grammarAccess.getCheckboxActionAccess().getGroup(), "rule__CheckboxAction__Group__0");
			builder.put(grammarAccess.getFillFieldAccess().getGroup(), "rule__FillField__Group__0");
			builder.put(grammarAccess.getFillFieldAccess().getGroup_4_1(), "rule__FillField__Group_4_1__0");
			builder.put(grammarAccess.getStoreElementAccess().getGroup_0(), "rule__StoreElement__Group_0__0");
			builder.put(grammarAccess.getStoreElementAccess().getGroup_1(), "rule__StoreElement__Group_1__0");
			builder.put(grammarAccess.getProgramAccess().getInstructionsAssignment(), "rule__Program__InstructionsAssignment");
			builder.put(grammarAccess.getNavigateToUrlAccess().getUrlAssignment_1(), "rule__NavigateToUrl__UrlAssignment_1");
			builder.put(grammarAccess.getCheckExistsAccess().getTypeAssignment_0_1(), "rule__CheckExists__TypeAssignment_0_1");
			builder.put(grammarAccess.getCheckExistsAccess().getIdAssignment_0_2(), "rule__CheckExists__IdAssignment_0_2");
			builder.put(grammarAccess.getCheckExistsAccess().getTypeAssignment_1_1(), "rule__CheckExists__TypeAssignment_1_1");
			builder.put(grammarAccess.getCheckExistsAccess().getVarnameAssignment_1_4(), "rule__CheckExists__VarnameAssignment_1_4");
			builder.put(grammarAccess.getClickOnAccess().getTypeAssignment_0_1(), "rule__ClickOn__TypeAssignment_0_1");
			builder.put(grammarAccess.getClickOnAccess().getIdAssignment_0_2_0(), "rule__ClickOn__IdAssignment_0_2_0");
			builder.put(grammarAccess.getClickOnAccess().getVarnameAssignment_0_2_1_1(), "rule__ClickOn__VarnameAssignment_0_2_1_1");
			builder.put(grammarAccess.getClickOnAccess().getTypeAssignment_1_1(), "rule__ClickOn__TypeAssignment_1_1");
			builder.put(grammarAccess.getClickOnAccess().getPos_indexAssignment_1_3(), "rule__ClickOn__Pos_indexAssignment_1_3");
			builder.put(grammarAccess.getClickOnAccess().getIdAssignment_1_5(), "rule__ClickOn__IdAssignment_1_5");
			builder.put(grammarAccess.getClickOnAccess().getTypeAssignment_2_1(), "rule__ClickOn__TypeAssignment_2_1");
			builder.put(grammarAccess.getClickOnAccess().getId_comboAssignment_2_2(), "rule__ClickOn__Id_comboAssignment_2_2");
			builder.put(grammarAccess.getClickOnAccess().getTo_selectAssignment_2_4(), "rule__ClickOn__To_selectAssignment_2_4");
			builder.put(grammarAccess.getCheckboxActionAccess().getBoolAssignment_1(), "rule__CheckboxAction__BoolAssignment_1");
			builder.put(grammarAccess.getCheckboxActionAccess().getActionsAssignment_2_1(), "rule__CheckboxAction__ActionsAssignment_2_1");
			builder.put(grammarAccess.getFillFieldAccess().getIdAssignment_2(), "rule__FillField__IdAssignment_2");
			builder.put(grammarAccess.getFillFieldAccess().getValueAssignment_4_0(), "rule__FillField__ValueAssignment_4_0");
			builder.put(grammarAccess.getFillFieldAccess().getVarnameAssignment_4_1_2(), "rule__FillField__VarnameAssignment_4_1_2");
			builder.put(grammarAccess.getStoreElementAccess().getPos_indexAssignment_0_2(), "rule__StoreElement__Pos_indexAssignment_0_2");
			builder.put(grammarAccess.getStoreElementAccess().getId_fromAssignment_0_4(), "rule__StoreElement__Id_fromAssignment_0_4");
			builder.put(grammarAccess.getStoreElementAccess().getProp_nameAssignment_0_6(), "rule__StoreElement__Prop_nameAssignment_0_6");
			builder.put(grammarAccess.getStoreElementAccess().getVarnameAssignment_0_9(), "rule__StoreElement__VarnameAssignment_0_9");
			builder.put(grammarAccess.getStoreElementAccess().getId_fromAssignment_1_2(), "rule__StoreElement__Id_fromAssignment_1_2");
			builder.put(grammarAccess.getStoreElementAccess().getProp_nameAssignment_1_4(), "rule__StoreElement__Prop_nameAssignment_1_4");
			builder.put(grammarAccess.getStoreElementAccess().getVarnameAssignment_1_7(), "rule__StoreElement__VarnameAssignment_1_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BadGrammarAccess grammarAccess;

	@Override
	protected InternalBadParser createParser() {
		InternalBadParser result = new InternalBadParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BadGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BadGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
