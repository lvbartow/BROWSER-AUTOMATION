/**
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.generator;

import java.io.File;
import java.util.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.project.browserautomation.bad.BoolString;
import org.project.browserautomation.bad.CheckExists;
import org.project.browserautomation.bad.CheckboxAction;
import org.project.browserautomation.bad.ClickOn;
import org.project.browserautomation.bad.ClickType;
import org.project.browserautomation.bad.ElemType;
import org.project.browserautomation.bad.FillField;
import org.project.browserautomation.bad.Instruction;
import org.project.browserautomation.bad.NavigateToUrl;
import org.project.browserautomation.bad.Program;
import org.project.browserautomation.bad.StoreElement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class BadGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Program program = ((Program) _head);
    String sep = File.separator;
    String filePath = (("bad" + sep) + "Case.java");
    fsa.generateFile(filePath, this.generateProgram(program));
  }

  public CharSequence generateProgram(final Program pgm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import org.openqa.selenium.By;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.JavascriptExecutor;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.WebElement;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.chrome.ChromeDriver;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.ExpectedConditions;");
    _builder.newLine();
    _builder.append("import org.openqa.selenium.support.ui.WebDriverWait;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.time.Duration;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class test {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("WebDriver driver = new ChromeDriver();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("WebDriverWait wait = null;");
    _builder.newLine();
    {
      EList<Instruction> _instructions = pgm.getInstructions();
      for(final Instruction ins : _instructions) {
        _builder.append("    \t");
        CharSequence _generateInstruction = this.generateInstruction(ins, pgm.getInstructions().indexOf(ins));
        _builder.append(_generateInstruction, "    \t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    \t");
    _builder.append("driver.quit();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateInstruction(final Instruction ins, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((ins instanceof NavigateToUrl)) {
        CharSequence _generateNavigateToUrl = this.generateNavigateToUrl(((NavigateToUrl)ins));
        _builder.append(_generateNavigateToUrl);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((ins instanceof CheckExists)) {
        {
          ElemType _type = ((CheckExists)ins).getType();
          boolean _equals = Objects.equals(_type, ElemType.LINK);
          if (_equals) {
            {
              String _varname = ((CheckExists)ins).getVarname();
              boolean _tripleEquals = (_varname == null);
              if (_tripleEquals) {
                CharSequence _generateCheckExistsLink = this.generateCheckExistsLink(((CheckExists)ins));
                _builder.append(_generateCheckExistsLink);
                _builder.newLineIfNotEmpty();
              } else {
                CharSequence _generateCheckExistsLinkVar = this.generateCheckExistsLinkVar(((CheckExists)ins));
                _builder.append(_generateCheckExistsLinkVar);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          ElemType _type_1 = ((CheckExists)ins).getType();
          boolean _equals_1 = Objects.equals(_type_1, ElemType.TEXT);
          if (_equals_1) {
            {
              String _varname_1 = ((CheckExists)ins).getVarname();
              boolean _tripleEquals_1 = (_varname_1 == null);
              if (_tripleEquals_1) {
                CharSequence _generateCheckExistsText = this.generateCheckExistsText(((CheckExists)ins));
                _builder.append(_generateCheckExistsText);
                _builder.newLineIfNotEmpty();
              } else {
                CharSequence _generateCheckExistsTextVar = this.generateCheckExistsTextVar(((CheckExists)ins));
                _builder.append(_generateCheckExistsTextVar);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      if ((ins instanceof ClickOn)) {
        {
          ClickType _type_2 = ((ClickOn)ins).getType();
          boolean _equals_2 = Objects.equals(_type_2, ClickType.LINK);
          if (_equals_2) {
            {
              String _varname_2 = ((ClickOn)ins).getVarname();
              boolean _tripleEquals_2 = (_varname_2 == null);
              if (_tripleEquals_2) {
                CharSequence _generateClickOnLink = this.generateClickOnLink(((ClickOn)ins));
                _builder.append(_generateClickOnLink);
                _builder.newLineIfNotEmpty();
              } else {
                CharSequence _generateClickOnLinkVar = this.generateClickOnLinkVar(((ClickOn)ins));
                _builder.append(_generateClickOnLinkVar);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          ClickType _type_3 = ((ClickOn)ins).getType();
          boolean _equals_3 = Objects.equals(_type_3, ClickType.IMAGE);
          if (_equals_3) {
            CharSequence _generateClickOnImage = this.generateClickOnImage(((ClickOn)ins));
            _builder.append(_generateClickOnImage);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ClickType _type_4 = ((ClickOn)ins).getType();
          boolean _equals_4 = Objects.equals(_type_4, ClickType.BUTTON);
          if (_equals_4) {
            CharSequence _generateClickOnButton = this.generateClickOnButton(((ClickOn)ins));
            _builder.append(_generateClickOnButton);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ClickType _type_5 = ((ClickOn)ins).getType();
          boolean _equals_5 = Objects.equals(_type_5, ClickType.COMBO);
          if (_equals_5) {
            CharSequence _generateClickOnCombo = this.generateClickOnCombo(((ClickOn)ins));
            _builder.append(_generateClickOnCombo);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if ((ins instanceof FillField)) {
        {
          String _value = ((FillField)ins).getValue();
          boolean _tripleNotEquals = (_value != null);
          if (_tripleNotEquals) {
            CharSequence _generateFillFieldValue = this.generateFillFieldValue(((FillField)ins));
            _builder.append(_generateFillFieldValue);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _generateFillFieldVar = this.generateFillFieldVar(((FillField)ins));
            _builder.append(_generateFillFieldVar);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if ((ins instanceof CheckboxAction)) {
        {
          boolean _isEmpty = ((CheckboxAction)ins).getActions().isEmpty();
          if (_isEmpty) {
            CharSequence _generateCheckBoxActionAll = this.generateCheckBoxActionAll(((CheckboxAction)ins));
            _builder.append(_generateCheckBoxActionAll);
            _builder.newLineIfNotEmpty();
          } else {
            CharSequence _generateCheckBoxActionNames = this.generateCheckBoxActionNames(((CheckboxAction)ins));
            _builder.append(_generateCheckBoxActionNames);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if ((ins instanceof StoreElement)) {
        CharSequence _generateStoreElement = this.generateStoreElement(((StoreElement)ins));
        _builder.append(_generateStoreElement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence generateNavigateToUrl(final NavigateToUrl ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("driver.get(\"");
    String _url = ins.getUrl();
    _builder.append(_url);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("wait = new WebDriverWait(driver, Duration.ofSeconds(5));");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateCheckExistsLink(final CheckExists ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(\"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("if (link != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JavascriptExecutor js = (JavascriptExecutor) driver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("js.executeScript(\"alert(\'Le lien \\\"");
    String _id_1 = ins.getId();
    _builder.append(_id_1, "\t");
    _builder.append("\\\" est présent sur la page.\');\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"Le lien \\\"");
    String _id_2 = ins.getId();
    _builder.append(_id_2, "\t");
    _builder.append("\\\" est présent sur la page.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateCheckExistsLinkVar(final CheckExists ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("int startIndex = ");
    String _varname = ins.getVarname();
    _builder.append(_varname);
    _builder.append(".indexOf(\"/\", ");
    String _varname_1 = ins.getVarname();
    _builder.append(_varname_1);
    _builder.append(".indexOf(\"//\") + 2); ");
    _builder.newLineIfNotEmpty();
    _builder.append("String path = ");
    String _varname_2 = ins.getVarname();
    _builder.append(_varname_2);
    _builder.append(".substring(startIndex);");
    _builder.newLineIfNotEmpty();
    _builder.append("WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//a[contains(@href,\\\"\"+path+\"\\\")]\")));\t\t");
    _builder.newLine();
    _builder.append("if (link != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JavascriptExecutor js = (JavascriptExecutor) driver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("js.executeScript(\"alert(\'Le lien \"+ ");
    String _varname_3 = ins.getVarname();
    _builder.append(_varname_3, "\t");
    _builder.append(" +\" est présent sur la page.\');\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"Le lien \"+ ");
    String _varname_4 = ins.getVarname();
    _builder.append(_varname_4, "\t");
    _builder.append(" +\" est présent sur la page.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateCheckExistsText(final CheckExists ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("String text = \"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("WebElement textToFind = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[contains(text(),\'\" + text + \"\')]\")));");
    _builder.newLine();
    _builder.append("if (textToFind != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JavascriptExecutor js = (JavascriptExecutor) driver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("js.executeScript(\"alert(\'Le texte \" + text + \" est présent sur la page.\');\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System.out.println(\"Le texte \" + text + \" est présent sur la page.\");");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateCheckExistsTextVar(final CheckExists ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement textToFind = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[contains(text(),\'\" + ");
    String _varname = ins.getVarname();
    _builder.append(_varname);
    _builder.append(" + \"\')]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("if (textToFind != null) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JavascriptExecutor js = (JavascriptExecutor) driver;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("js.executeScript(\"alert(\'Le texte \" + ");
    String _varname_1 = ins.getVarname();
    _builder.append(_varname_1, "\t");
    _builder.append(" + \" est présent sur la page.\');\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("System.out.println(\"Le texte \" + ");
    String _varname_2 = ins.getVarname();
    _builder.append(_varname_2, "\t");
    _builder.append(" + \" est présent sur la page.\");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClickOnLink(final ClickOn ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[@id=\\\"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\\\"]/div/div/a\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", link);");
    _builder.newLine();
    _builder.append("link.click();");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClickOnLinkVar(final ClickOn ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement linkFromVar = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[contains(text(),\'\" + ");
    String _varname = ins.getVarname();
    _builder.append(_varname);
    _builder.append(" +\"\')]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("linkFromVar.click();");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClickOnImage(final ClickOn ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement linkImage = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"(//img[@alt=\'");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\'])[1]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", linkImage);");
    _builder.newLine();
    _builder.append("link.click();");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClickOnButton(final ClickOn ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement button = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[@value=\\\"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\\\"]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", button);");
    _builder.newLine();
    _builder.append("button.click();");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateClickOnCombo(final ClickOn ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement dropdown = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//*[@id=\\\"");
    String _id_combo = ins.getId_combo();
    _builder.append(_id_combo);
    _builder.append("\\\"]/div[1]/div\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", dropdown);");
    _builder.newLine();
    _builder.append("dropdown.click();");
    _builder.newLine();
    _builder.append("WebElement optionToSelect = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(\"//li[text()=\'");
    String _to_select = ins.getTo_select();
    _builder.append(_to_select);
    _builder.append("\']\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", optionToSelect);");
    _builder.newLine();
    _builder.append("optionToSelect.click();");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateFillFieldValue(final FillField ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement searchInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[@id=\\\"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\\\"]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", searchInput);");
    _builder.newLine();
    _builder.append("searchInput.sendKeys(\"");
    String _value = ins.getValue();
    _builder.append(_value);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence generateFillFieldVar(final FillField ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement searchInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//*[@id=\\\"");
    String _id = ins.getId();
    _builder.append(_id);
    _builder.append("\\\"]\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", searchInput);");
    _builder.newLine();
    _builder.append("searchInput.sendKeys(");
    String _varname = ins.getVarname();
    _builder.append(_varname);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }

  public CharSequence generateCheckBoxActionAll(final CheckboxAction ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement checkboxesParent = driver.findElement(By.xpath(\"/html/body/div[1]/div/div[6]/div/div/div/main/div/div/div[1]/form/div/div[2]\"));");
    _builder.newLine();
    {
      BoolString _bool = ins.getBool();
      boolean _equals = Objects.equals(_bool, BoolString.FALSE);
      if (_equals) {
        _builder.append("List<WebElement> children = checkboxesParent.findElements(By.cssSelector(\"input:checked[type=\'checkbox\']\"));");
        _builder.newLine();
      } else {
        _builder.append("List<WebElement> children = checkboxesParent.findElements(By.cssSelector(\"input:unchecked[type=\'checkbox\']\"));");
        _builder.newLine();
      }
    }
    _builder.append("for (WebElement we : children) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("we.click();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateCheckBoxActionNames(final CheckboxAction ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("List<String> checkboxToCheckNames = new ArrayList();");
    _builder.newLine();
    {
      EList<String> _actions = ins.getActions();
      for(final String action : _actions) {
        _builder.append("checkboxToCheckNames.add(\"");
        _builder.append(action);
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("for (String toCheck : checkboxToCheckNames) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("WebElement label = driver.findElement(By.xpath(\"//label[text()=\'\" + toCheck + \"\']\"));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String forAttribute = label.getAttribute(\"for\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("WebElement checkbox = driver.findElement(By.id(forAttribute));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", checkbox);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("checkbox.click();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateStoreElement(final StoreElement ins) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("WebElement parent_for_");
    String _varname = ins.getVarname();
    _builder.append(_varname);
    _builder.append(" = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath(\"//div[@id=\'");
    String _id_from = ins.getId_from();
    _builder.append(_id_from);
    _builder.append("\']\")));");
    _builder.newLineIfNotEmpty();
    _builder.append("((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", parent_for_");
    String _varname_1 = ins.getVarname();
    _builder.append(_varname_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("WebElement elem_");
    String _varname_2 = ins.getVarname();
    _builder.append(_varname_2);
    _builder.append(" = new WebDriverWait(driver, Duration.ofSeconds(10)).until(");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("ExpectedConditions.presenceOfElementLocated(");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("By.xpath(\".//div[contains(@class, \'views-row\')][");
    int _pos_index = ins.getPos_index();
    _builder.append(_pos_index, "\t\t\t    \t");
    _builder.append("]//h3[@class=\'field-content\']/a\")));");
    _builder.newLineIfNotEmpty();
    {
      String _prop_name = ins.getProp_name();
      boolean _equals = Objects.equals(_prop_name, "title");
      if (_equals) {
        _builder.append("String ");
        String _varname_3 = ins.getVarname();
        _builder.append(_varname_3);
        _builder.append(" = elem_");
        String _varname_4 = ins.getVarname();
        _builder.append(_varname_4);
        _builder.append(".getText();");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _prop_name_1 = ins.getProp_name();
      boolean _equals_1 = Objects.equals(_prop_name_1, "url");
      if (_equals_1) {
        _builder.append("String ");
        String _varname_5 = ins.getVarname();
        _builder.append(_varname_5);
        _builder.append(" = elem_");
        String _varname_6 = ins.getVarname();
        _builder.append(_varname_6);
        _builder.append(".getAttribute(\"href\");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
