/**
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.bad.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.project.browserautomation.bad.BadPackage;
import org.project.browserautomation.bad.BoolString;
import org.project.browserautomation.bad.CheckboxAction;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Checkbox Action</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.project.browserautomation.bad.impl.CheckboxActionImpl#getBool <em>Bool</em>}</li>
 *   <li>{@link org.project.browserautomation.bad.impl.CheckboxActionImpl#getActions <em>Actions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckboxActionImpl extends InstructionImpl implements CheckboxAction
{
  /**
   * The default value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected static final BoolString BOOL_EDEFAULT = BoolString.TRUE;

  /**
   * The cached value of the '{@link #getBool() <em>Bool</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBool()
   * @generated
   * @ordered
   */
  protected BoolString bool = BOOL_EDEFAULT;

  /**
   * The cached value of the '{@link #getActions() <em>Actions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActions()
   * @generated
   * @ordered
   */
  protected EList<String> actions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckboxActionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BadPackage.Literals.CHECKBOX_ACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolString getBool()
  {
    return bool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBool(BoolString newBool)
  {
    BoolString oldBool = bool;
    bool = newBool == null ? BOOL_EDEFAULT : newBool;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BadPackage.CHECKBOX_ACTION__BOOL, oldBool, bool));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getActions()
  {
    if (actions == null)
    {
      actions = new EDataTypeEList<String>(String.class, this, BadPackage.CHECKBOX_ACTION__ACTIONS);
    }
    return actions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BadPackage.CHECKBOX_ACTION__BOOL:
        return getBool();
      case BadPackage.CHECKBOX_ACTION__ACTIONS:
        return getActions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BadPackage.CHECKBOX_ACTION__BOOL:
        setBool((BoolString)newValue);
        return;
      case BadPackage.CHECKBOX_ACTION__ACTIONS:
        getActions().clear();
        getActions().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BadPackage.CHECKBOX_ACTION__BOOL:
        setBool(BOOL_EDEFAULT);
        return;
      case BadPackage.CHECKBOX_ACTION__ACTIONS:
        getActions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BadPackage.CHECKBOX_ACTION__BOOL:
        return bool != BOOL_EDEFAULT;
      case BadPackage.CHECKBOX_ACTION__ACTIONS:
        return actions != null && !actions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (bool: ");
    result.append(bool);
    result.append(", actions: ");
    result.append(actions);
    result.append(')');
    return result.toString();
  }

} //CheckboxActionImpl
