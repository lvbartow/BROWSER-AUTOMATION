/*
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.project.browserautomation.bad.Program
import java.io.File
import org.project.browserautomation.bad.Instruction
import org.project.browserautomation.bad.NavigateToUrl
import org.project.browserautomation.bad.CheckExists
import org.project.browserautomation.bad.ElemType
import org.project.browserautomation.bad.ClickOn
import org.project.browserautomation.bad.ClickType
import org.project.browserautomation.bad.FillField
import org.project.browserautomation.bad.CheckboxAction
import org.project.browserautomation.bad.BoolString
import org.project.browserautomation.bad.StoreElement
import java.nio.file.Files

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class BadGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    	resource.resourceSet.resources.forEach[res |
        if (res.contents.head instanceof Program) {
            val program = res.contents.head as Program
            val sep = File.separator
            val fileName = res.URI.trimFileExtension.lastSegment
            val filePath = 'generated' + sep + fileName + '.java'
            fsa.generateFile(filePath, program.generateProgram)
        }
    ]
	}
	
	def generateProgram(Program pgm) '''
		import org.openqa.selenium.By;
		import org.openqa.selenium.JavascriptExecutor;
		import org.openqa.selenium.WebDriver;
		import org.openqa.selenium.WebElement;
		import org.openqa.selenium.chrome.ChromeDriver;
		import org.openqa.selenium.support.ui.ExpectedConditions;
		import org.openqa.selenium.support.ui.WebDriverWait;
		
		import java.time.Duration;
		import java.util.ArrayList;
		import java.util.List;
		
		public class test {
		    public static void main(String[] args) {
		    	WebDriver driver = new ChromeDriver();
		    	WebDriverWait wait = null;
		    	«FOR Instruction ins : pgm.instructions»
		    		«ins.generateInstruction(pgm.instructions.indexOf(ins))»
		    	«ENDFOR»
		    	driver.quit();
		    }
		}
	'''
	
	def generateInstruction(Instruction ins, int index) '''
		«IF ins instanceof NavigateToUrl »
			«ins.generateNavigateToUrl»
		«ENDIF»
		«IF ins instanceof CheckExists »
			«IF ins.type == ElemType.LINK »
				«IF ins.varname === null»
					«ins.generateCheckExistsLink»
				«ELSE»
					«ins.generateCheckExistsLinkVar»
				«ENDIF»
			«ENDIF»
			«IF ins.type == ElemType.TEXT »
				«IF ins.varname === null»
					«ins.generateCheckExistsText»
				«ELSE»
					«ins.generateCheckExistsTextVar»
				«ENDIF»
			«ENDIF»
		«ENDIF»
		«IF ins instanceof ClickOn »
				«IF ins.type == ClickType.LINK »
						«IF ins.varname === null»
							«ins.generateClickOnLink»
						«ELSE»
							«ins.generateClickOnLinkVar»
						«ENDIF»
				«ENDIF»
				«IF ins.type == ClickType.IMAGE »
						«ins.generateClickOnImage»
				«ENDIF»
				«IF ins.type == ClickType.BUTTON »
					«ins.generateClickOnButton»
				«ENDIF»
				«IF ins.type == ClickType.COMBO »
					«ins.generateClickOnCombo»
				«ENDIF»
		«ENDIF»
		«IF ins instanceof FillField »
			«IF ins.value !== null »
				«ins.generateFillFieldValue»
			«ELSE»
				«ins.generateFillFieldVar»
			«ENDIF»
		«ENDIF»
		«IF ins instanceof CheckboxAction »
			«IF ins.actions.isEmpty»
				«ins.generateCheckBoxActionAll»
			«ELSE»
				«ins.generateCheckBoxActionNames»
			«ENDIF»
		«ENDIF»
		«IF ins instanceof StoreElement»
			«ins.generateStoreElement»
		«ENDIF»
	'''
		
	def generateNavigateToUrl(NavigateToUrl ins) '''
		driver.get("«ins.url»");
		wait = new WebDriverWait(driver, Duration.ofSeconds(5));
	'''
	
	def generateCheckExistsLink(CheckExists ins) '''
		WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector("«ins.id»")));
		if (link != null) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("alert('Le lien \"«ins.id»\" est présent sur la page.');");
			System.out.println("Le lien \"«ins.id»\" est présent sur la page.");
		}
	'''
	
	def generateCheckExistsLinkVar(CheckExists ins) '''
		int startIndex = «ins.varname».indexOf("/", «ins.varname».indexOf("//") + 2); 
		String path = «ins.varname».substring(startIndex);
		WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//a[contains(@href,\""+path+"\")]")));		
		if (link != null) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("alert('Le lien "+ «ins.varname» +" est présent sur la page.');");
			System.out.println("Le lien "+ «ins.varname» +" est présent sur la page.");
		}
	'''
	
	def generateCheckExistsText(CheckExists ins) '''
		String text = "«ins.id»";
		WebElement textToFind = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[contains(text(),'" + text + "')]")));
		if (textToFind != null) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("alert('Le texte " + text + " est présent sur la page.');");
			System.out.println("Le texte " + text + " est présent sur la page.");
		}
	'''
	
	def generateCheckExistsTextVar(CheckExists ins) '''
		WebElement textToFind = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[contains(text(),'" + «ins.varname» + "')]")));
		if (textToFind != null) {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("alert('Le texte " + «ins.varname» + " est présent sur la page.');");
			System.out.println("Le texte " + «ins.varname» + " est présent sur la page.");
		}
	'''
	
	def generateClickOnLink(ClickOn ins) '''
        WebElement link = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"«ins.id»\"]/div/div/a")));
        ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", link);
        link.click();
	'''
	
	def generateClickOnLinkVar(ClickOn ins) '''
		WebElement linkFromVar = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[contains(text(),'" + «ins.varname» +"')]")));
		linkFromVar.click();
	'''
	
	def generateClickOnImage(ClickOn ins) '''
		WebElement linkImage = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("(//img[@alt='«ins.id»'])[1]")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", linkImage);
		link.click();
	'''
	
	
	def generateClickOnButton(ClickOn ins) '''
		WebElement button = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@value=\"«ins.id»\"]")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", button);
		button.click();
	'''
	
	def generateClickOnCombo(ClickOn ins) '''
		WebElement dropdown = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"«ins.id_combo»\"]/div[1]/div")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", dropdown);
		dropdown.click();
		WebElement optionToSelect = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[text()='«ins.to_select»']")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", optionToSelect);
		optionToSelect.click();
	'''
	
	
	def generateFillFieldValue(FillField ins) '''
		WebElement searchInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"«ins.id»\"]")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", searchInput);
		searchInput.sendKeys("«ins.value»");
	'''
	
	def generateFillFieldVar(FillField ins) '''
		WebElement searchInput = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//*[@id=\"«ins.id»\"]")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", searchInput);
		searchInput.sendKeys(«ins.varname»);
	'''
	
	def generateCheckBoxActionAll(CheckboxAction ins) '''
		WebElement checkboxesParent = driver.findElement(By.xpath("/html/body/div[1]/div/div[6]/div/div/div/main/div/div/div[1]/form/div/div[2]"));
		«IF ins.bool == BoolString.FALSE »
			List<WebElement> children = checkboxesParent.findElements(By.cssSelector("input:checked[type='checkbox']"));
		«ELSE»
			List<WebElement> children = checkboxesParent.findElements(By.cssSelector("input:unchecked[type='checkbox']"));
		«ENDIF»
		for (WebElement we : children) {
			we.click();
		}
	'''	
	 
	def generateCheckBoxActionNames(CheckboxAction ins) '''
		List<String> checkboxToCheckNames = new ArrayList();
		«FOR action : ins.actions»
		checkboxToCheckNames.add("«action»");
		«ENDFOR»
		for (String toCheck : checkboxToCheckNames) {
			WebElement label = driver.findElement(By.xpath("//label[text()='" + toCheck + "']"));
			String forAttribute = label.getAttribute("for");
			WebElement checkbox = driver.findElement(By.id(forAttribute));
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", checkbox);
			checkbox.click();
		}
	'''
	
	def generateStoreElement(StoreElement ins) '''
		WebElement parent_for_«ins.varname» = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//div[@id='«ins.id_from»']")));
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", parent_for_«ins.varname»);
		WebElement elem_«ins.varname» = new WebDriverWait(driver, Duration.ofSeconds(10)).until(
						ExpectedConditions.presenceOfElementLocated(
					    	By.xpath(".//div[contains(@class, 'views-row')][«ins.pos_index»]//h3[@class='field-content']/a")));
		«IF ins.prop_name == "title"»
		String «ins.varname» = elem_«ins.varname».getText();
		«ENDIF»
		«IF ins.prop_name == "url"»
		String «ins.varname» = elem_«ins.varname».getAttribute("href");
		«ENDIF»
	'''
	
	
	
	
		
}
