/*
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BadGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.Program");
		private final Assignment cInstructionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_0 = (RuleCall)cInstructionsAssignment.eContents().get(0);
		
		//Program:
		//    instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }
		
		//instructions+=Instruction*
		public Assignment getInstructionsAssignment() { return cInstructionsAssignment; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_0() { return cInstructionsInstructionParserRuleCall_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigateToUrlParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClickOnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFillFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckExistsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckboxActionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cStoreElementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Instruction:
		//    NavigateToUrl | ClickOn | FillField | CheckExists | CheckboxAction | StoreElement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigateToUrl | ClickOn | FillField | CheckExists | CheckboxAction | StoreElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NavigateToUrl
		public RuleCall getNavigateToUrlParserRuleCall_0() { return cNavigateToUrlParserRuleCall_0; }
		
		//ClickOn
		public RuleCall getClickOnParserRuleCall_1() { return cClickOnParserRuleCall_1; }
		
		//FillField
		public RuleCall getFillFieldParserRuleCall_2() { return cFillFieldParserRuleCall_2; }
		
		//CheckExists
		public RuleCall getCheckExistsParserRuleCall_3() { return cCheckExistsParserRuleCall_3; }
		
		//CheckboxAction
		public RuleCall getCheckboxActionParserRuleCall_4() { return cCheckboxActionParserRuleCall_4; }
		
		//StoreElement
		public RuleCall getStoreElementParserRuleCall_5() { return cStoreElementParserRuleCall_5; }
	}
	public class NavigateToUrlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.NavigateToUrl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNAV_TOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlURLTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		
		//NavigateToUrl:
		//    'NAV_TO' url=URL;
		@Override public ParserRule getRule() { return rule; }
		
		//'NAV_TO' url=URL
		public Group getGroup() { return cGroup; }
		
		//'NAV_TO'
		public Keyword getNAV_TOKeyword_0() { return cNAV_TOKeyword_0; }
		
		//url=URL
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }
		
		//URL
		public RuleCall getUrlURLTerminalRuleCall_1_0() { return cUrlURLTerminalRuleCall_1_0; }
	}
	public class CheckExistsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.CheckExists");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCHECK_EXISTSKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeElemTypeEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cIdAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cIdAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCHECK_EXISTSKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeElemTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cFROMKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cVARKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVarnameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVarnameSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cVarnameAssignment_1_4.eContents().get(0);
		
		//CheckExists:
		//    'CHECK_EXISTS' type=ElemType id=STRING
		//    |
		//    "CHECK_EXISTS" type=ElemType "FROM" "VAR" varname=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'CHECK_EXISTS' type=ElemType id=STRING
		//|
		//"CHECK_EXISTS" type=ElemType "FROM" "VAR" varname=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CHECK_EXISTS' type=ElemType id=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//'CHECK_EXISTS'
		public Keyword getCHECK_EXISTSKeyword_0_0() { return cCHECK_EXISTSKeyword_0_0; }
		
		//type=ElemType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//ElemType
		public RuleCall getTypeElemTypeEnumRuleCall_0_1_0() { return cTypeElemTypeEnumRuleCall_0_1_0; }
		
		//id=STRING
		public Assignment getIdAssignment_0_2() { return cIdAssignment_0_2; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0_2_0() { return cIdSTRINGTerminalRuleCall_0_2_0; }
		
		//"CHECK_EXISTS" type=ElemType "FROM" "VAR" varname=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//"CHECK_EXISTS"
		public Keyword getCHECK_EXISTSKeyword_1_0() { return cCHECK_EXISTSKeyword_1_0; }
		
		//type=ElemType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ElemType
		public RuleCall getTypeElemTypeEnumRuleCall_1_1_0() { return cTypeElemTypeEnumRuleCall_1_1_0; }
		
		//"FROM"
		public Keyword getFROMKeyword_1_2() { return cFROMKeyword_1_2; }
		
		//"VAR"
		public Keyword getVARKeyword_1_3() { return cVARKeyword_1_3; }
		
		//varname=STRING
		public Assignment getVarnameAssignment_1_4() { return cVarnameAssignment_1_4; }
		
		//STRING
		public RuleCall getVarnameSTRINGTerminalRuleCall_1_4_0() { return cVarnameSTRINGTerminalRuleCall_1_4_0; }
	}
	public class ClickOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.ClickOn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCLICK_ONKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeClickTypeEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Assignment cIdAssignment_0_2_0 = (Assignment)cAlternatives_0_2.eContents().get(0);
		private final RuleCall cIdSTRINGTerminalRuleCall_0_2_0_0 = (RuleCall)cIdAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Keyword cVARKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cVarnameAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cVarnameSTRINGTerminalRuleCall_0_2_1_1_0 = (RuleCall)cVarnameAssignment_0_2_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCLICK_ONKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeClickTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Keyword cPOSKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPos_indexAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPos_indexINTTerminalRuleCall_1_3_0 = (RuleCall)cPos_indexAssignment_1_3.eContents().get(0);
		private final Keyword cINKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cIdAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cIdSTRINGTerminalRuleCall_1_5_0 = (RuleCall)cIdAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCLICK_ONKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeClickTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Assignment cId_comboAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cId_comboSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cId_comboAssignment_2_2.eContents().get(0);
		private final Keyword cVALUEKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cTo_selectAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cTo_selectSTRINGTerminalRuleCall_2_4_0 = (RuleCall)cTo_selectAssignment_2_4.eContents().get(0);
		
		//ClickOn:
		//    'CLICK_ON' type=ClickType (id=STRING | "VAR" + varname=STRING)
		//    |
		//    'CLICK_ON' type=ClickType "POS" pos_index=INT "IN" id=STRING
		//    |
		//    'CLICK_ON' type=ClickType id_combo=STRING "VALUE" to_select=STRING
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'CLICK_ON' type=ClickType (id=STRING | "VAR" + varname=STRING)
		//|
		//'CLICK_ON' type=ClickType "POS" pos_index=INT "IN" id=STRING
		//|
		//'CLICK_ON' type=ClickType id_combo=STRING "VALUE" to_select=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'CLICK_ON' type=ClickType (id=STRING | "VAR" + varname=STRING)
		public Group getGroup_0() { return cGroup_0; }
		
		//'CLICK_ON'
		public Keyword getCLICK_ONKeyword_0_0() { return cCLICK_ONKeyword_0_0; }
		
		//type=ClickType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//ClickType
		public RuleCall getTypeClickTypeEnumRuleCall_0_1_0() { return cTypeClickTypeEnumRuleCall_0_1_0; }
		
		//(id=STRING | "VAR" + varname=STRING)
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//id=STRING
		public Assignment getIdAssignment_0_2_0() { return cIdAssignment_0_2_0; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_0_2_0_0() { return cIdSTRINGTerminalRuleCall_0_2_0_0; }
		
		//"VAR" + varname=STRING
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//"VAR" +
		public Keyword getVARKeyword_0_2_1_0() { return cVARKeyword_0_2_1_0; }
		
		//varname=STRING
		public Assignment getVarnameAssignment_0_2_1_1() { return cVarnameAssignment_0_2_1_1; }
		
		//STRING
		public RuleCall getVarnameSTRINGTerminalRuleCall_0_2_1_1_0() { return cVarnameSTRINGTerminalRuleCall_0_2_1_1_0; }
		
		//'CLICK_ON' type=ClickType "POS" pos_index=INT "IN" id=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//'CLICK_ON'
		public Keyword getCLICK_ONKeyword_1_0() { return cCLICK_ONKeyword_1_0; }
		
		//type=ClickType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//ClickType
		public RuleCall getTypeClickTypeEnumRuleCall_1_1_0() { return cTypeClickTypeEnumRuleCall_1_1_0; }
		
		//"POS"
		public Keyword getPOSKeyword_1_2() { return cPOSKeyword_1_2; }
		
		//pos_index=INT
		public Assignment getPos_indexAssignment_1_3() { return cPos_indexAssignment_1_3; }
		
		//INT
		public RuleCall getPos_indexINTTerminalRuleCall_1_3_0() { return cPos_indexINTTerminalRuleCall_1_3_0; }
		
		//"IN"
		public Keyword getINKeyword_1_4() { return cINKeyword_1_4; }
		
		//id=STRING
		public Assignment getIdAssignment_1_5() { return cIdAssignment_1_5; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_1_5_0() { return cIdSTRINGTerminalRuleCall_1_5_0; }
		
		//'CLICK_ON' type=ClickType id_combo=STRING "VALUE" to_select=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//'CLICK_ON'
		public Keyword getCLICK_ONKeyword_2_0() { return cCLICK_ONKeyword_2_0; }
		
		//type=ClickType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//ClickType
		public RuleCall getTypeClickTypeEnumRuleCall_2_1_0() { return cTypeClickTypeEnumRuleCall_2_1_0; }
		
		//id_combo=STRING
		public Assignment getId_comboAssignment_2_2() { return cId_comboAssignment_2_2; }
		
		//STRING
		public RuleCall getId_comboSTRINGTerminalRuleCall_2_2_0() { return cId_comboSTRINGTerminalRuleCall_2_2_0; }
		
		//"VALUE"
		public Keyword getVALUEKeyword_2_3() { return cVALUEKeyword_2_3; }
		
		//to_select=STRING
		public Assignment getTo_selectAssignment_2_4() { return cTo_selectAssignment_2_4; }
		
		//STRING
		public RuleCall getTo_selectSTRINGTerminalRuleCall_2_4_0() { return cTo_selectSTRINGTerminalRuleCall_2_4_0; }
	}
	public class CheckboxActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.CheckboxAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHECKBOX_ACTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBoolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoolBoolStringEnumRuleCall_1_0 = (RuleCall)cBoolAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cALLKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cActionsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//CheckboxAction:
		//    "CHECKBOX_ACTION" bool=BoolString ("ALL" | actions+=STRING*)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"CHECKBOX_ACTION" bool=BoolString ("ALL" | actions+=STRING*)
		public Group getGroup() { return cGroup; }
		
		//"CHECKBOX_ACTION"
		public Keyword getCHECKBOX_ACTIONKeyword_0() { return cCHECKBOX_ACTIONKeyword_0; }
		
		//bool=BoolString
		public Assignment getBoolAssignment_1() { return cBoolAssignment_1; }
		
		//BoolString
		public RuleCall getBoolBoolStringEnumRuleCall_1_0() { return cBoolBoolStringEnumRuleCall_1_0; }
		
		//("ALL" | actions+=STRING*)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"ALL"
		public Keyword getALLKeyword_2_0() { return cALLKeyword_2_0; }
		
		//actions+=STRING*
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }
		
		//STRING
		public RuleCall getActionsSTRINGTerminalRuleCall_2_1_0() { return cActionsSTRINGTerminalRuleCall_2_1_0; }
	}
	public class FillFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.FillField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFILL_FIELDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNAMEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdSTRINGTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cVALUEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cFROMKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Keyword cVARKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cVarnameAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cVarnameSTRINGTerminalRuleCall_4_1_2_0 = (RuleCall)cVarnameAssignment_4_1_2.eContents().get(0);
		
		//FillField:
		//    'FILL_FIELD' "NAME" id=STRING "VALUE" (value=STRING | "FROM" "VAR" varname=STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FILL_FIELD' "NAME" id=STRING "VALUE" (value=STRING | "FROM" "VAR" varname=STRING)
		public Group getGroup() { return cGroup; }
		
		//'FILL_FIELD'
		public Keyword getFILL_FIELDKeyword_0() { return cFILL_FIELDKeyword_0; }
		
		//"NAME"
		public Keyword getNAMEKeyword_1() { return cNAMEKeyword_1; }
		
		//id=STRING
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//STRING
		public RuleCall getIdSTRINGTerminalRuleCall_2_0() { return cIdSTRINGTerminalRuleCall_2_0; }
		
		//"VALUE"
		public Keyword getVALUEKeyword_3() { return cVALUEKeyword_3; }
		
		//(value=STRING | "FROM" "VAR" varname=STRING)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//value=STRING
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_0_0() { return cValueSTRINGTerminalRuleCall_4_0_0; }
		
		//"FROM" "VAR" varname=STRING
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//"FROM"
		public Keyword getFROMKeyword_4_1_0() { return cFROMKeyword_4_1_0; }
		
		//"VAR"
		public Keyword getVARKeyword_4_1_1() { return cVARKeyword_4_1_1; }
		
		//varname=STRING
		public Assignment getVarnameAssignment_4_1_2() { return cVarnameAssignment_4_1_2; }
		
		//STRING
		public RuleCall getVarnameSTRINGTerminalRuleCall_4_1_2_0() { return cVarnameSTRINGTerminalRuleCall_4_1_2_0; }
	}
	public class StoreElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.StoreElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSTORE_ELEMENTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cPOSKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPos_indexAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cPos_indexINTTerminalRuleCall_0_2_0 = (RuleCall)cPos_indexAssignment_0_2.eContents().get(0);
		private final Keyword cFROMKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cId_fromAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cId_fromSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cId_fromAssignment_0_4.eContents().get(0);
		private final Keyword cPROPKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cProp_nameAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cProp_nameSTRINGTerminalRuleCall_0_6_0 = (RuleCall)cProp_nameAssignment_0_6.eContents().get(0);
		private final Keyword cINKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Keyword cVARKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Assignment cVarnameAssignment_0_9 = (Assignment)cGroup_0.eContents().get(9);
		private final RuleCall cVarnameSTRINGTerminalRuleCall_0_9_0 = (RuleCall)cVarnameAssignment_0_9.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSTORE_ELEMENTKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cFROMKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cId_fromAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cId_fromSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cId_fromAssignment_1_2.eContents().get(0);
		private final Keyword cPROPKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cProp_nameAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cProp_nameSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cProp_nameAssignment_1_4.eContents().get(0);
		private final Keyword cINKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Keyword cVARKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cVarnameAssignment_1_7 = (Assignment)cGroup_1.eContents().get(7);
		private final RuleCall cVarnameSTRINGTerminalRuleCall_1_7_0 = (RuleCall)cVarnameAssignment_1_7.eContents().get(0);
		
		//StoreElement:
		//    "STORE_ELEMENT" "POS" pos_index=INT "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		//    |
		//    "STORE_ELEMENT" "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"STORE_ELEMENT" "POS" pos_index=INT "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		//|
		//"STORE_ELEMENT" "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"STORE_ELEMENT" "POS" pos_index=INT "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//"STORE_ELEMENT"
		public Keyword getSTORE_ELEMENTKeyword_0_0() { return cSTORE_ELEMENTKeyword_0_0; }
		
		//"POS"
		public Keyword getPOSKeyword_0_1() { return cPOSKeyword_0_1; }
		
		//pos_index=INT
		public Assignment getPos_indexAssignment_0_2() { return cPos_indexAssignment_0_2; }
		
		//INT
		public RuleCall getPos_indexINTTerminalRuleCall_0_2_0() { return cPos_indexINTTerminalRuleCall_0_2_0; }
		
		//"FROM"
		public Keyword getFROMKeyword_0_3() { return cFROMKeyword_0_3; }
		
		//id_from=STRING
		public Assignment getId_fromAssignment_0_4() { return cId_fromAssignment_0_4; }
		
		//STRING
		public RuleCall getId_fromSTRINGTerminalRuleCall_0_4_0() { return cId_fromSTRINGTerminalRuleCall_0_4_0; }
		
		//"PROP"
		public Keyword getPROPKeyword_0_5() { return cPROPKeyword_0_5; }
		
		//prop_name=STRING
		public Assignment getProp_nameAssignment_0_6() { return cProp_nameAssignment_0_6; }
		
		//STRING
		public RuleCall getProp_nameSTRINGTerminalRuleCall_0_6_0() { return cProp_nameSTRINGTerminalRuleCall_0_6_0; }
		
		//"IN"
		public Keyword getINKeyword_0_7() { return cINKeyword_0_7; }
		
		//"VAR"
		public Keyword getVARKeyword_0_8() { return cVARKeyword_0_8; }
		
		//varname=STRING
		public Assignment getVarnameAssignment_0_9() { return cVarnameAssignment_0_9; }
		
		//STRING
		public RuleCall getVarnameSTRINGTerminalRuleCall_0_9_0() { return cVarnameSTRINGTerminalRuleCall_0_9_0; }
		
		//"STORE_ELEMENT" "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//"STORE_ELEMENT"
		public Keyword getSTORE_ELEMENTKeyword_1_0() { return cSTORE_ELEMENTKeyword_1_0; }
		
		//"FROM"
		public Keyword getFROMKeyword_1_1() { return cFROMKeyword_1_1; }
		
		//id_from=STRING
		public Assignment getId_fromAssignment_1_2() { return cId_fromAssignment_1_2; }
		
		//STRING
		public RuleCall getId_fromSTRINGTerminalRuleCall_1_2_0() { return cId_fromSTRINGTerminalRuleCall_1_2_0; }
		
		//"PROP"
		public Keyword getPROPKeyword_1_3() { return cPROPKeyword_1_3; }
		
		//prop_name=STRING
		public Assignment getProp_nameAssignment_1_4() { return cProp_nameAssignment_1_4; }
		
		//STRING
		public RuleCall getProp_nameSTRINGTerminalRuleCall_1_4_0() { return cProp_nameSTRINGTerminalRuleCall_1_4_0; }
		
		//"IN"
		public Keyword getINKeyword_1_5() { return cINKeyword_1_5; }
		
		//"VAR"
		public Keyword getVARKeyword_1_6() { return cVARKeyword_1_6; }
		
		//varname=STRING
		public Assignment getVarnameAssignment_1_7() { return cVarnameAssignment_1_7; }
		
		//STRING
		public RuleCall getVarnameSTRINGTerminalRuleCall_1_7_0() { return cVarnameSTRINGTerminalRuleCall_1_7_0; }
	}
	
	public class ClickTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.ClickType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBUTTONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBUTTONBUTTONKeyword_0_0 = (Keyword)cBUTTONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLINKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLINKLINKKeyword_1_0 = (Keyword)cLINKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIMAGEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIMAGEIMAGEKeyword_2_0 = (Keyword)cIMAGEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCOMBOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCOMBOCOMBOKeyword_3_0 = (Keyword)cCOMBOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ClickType:
		//    BUTTON="BUTTON" | LINK="LINK" | IMAGE="IMAGE" | COMBO="COMBO";
		public EnumRule getRule() { return rule; }
		
		//BUTTON="BUTTON" | LINK="LINK" | IMAGE="IMAGE" | COMBO="COMBO"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BUTTON="BUTTON"
		public EnumLiteralDeclaration getBUTTONEnumLiteralDeclaration_0() { return cBUTTONEnumLiteralDeclaration_0; }
		
		//"BUTTON"
		public Keyword getBUTTONBUTTONKeyword_0_0() { return cBUTTONBUTTONKeyword_0_0; }
		
		//LINK="LINK"
		public EnumLiteralDeclaration getLINKEnumLiteralDeclaration_1() { return cLINKEnumLiteralDeclaration_1; }
		
		//"LINK"
		public Keyword getLINKLINKKeyword_1_0() { return cLINKLINKKeyword_1_0; }
		
		//IMAGE="IMAGE"
		public EnumLiteralDeclaration getIMAGEEnumLiteralDeclaration_2() { return cIMAGEEnumLiteralDeclaration_2; }
		
		//"IMAGE"
		public Keyword getIMAGEIMAGEKeyword_2_0() { return cIMAGEIMAGEKeyword_2_0; }
		
		//COMBO="COMBO"
		public EnumLiteralDeclaration getCOMBOEnumLiteralDeclaration_3() { return cCOMBOEnumLiteralDeclaration_3; }
		
		//"COMBO"
		public Keyword getCOMBOCOMBOKeyword_3_0() { return cCOMBOCOMBOKeyword_3_0; }
	}
	public class ElemTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.ElemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLINKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLINKLINKKeyword_0_0 = (Keyword)cLINKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTEXTTEXTKeyword_1_0 = (Keyword)cTEXTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ElemType:
		//    LINK="LINK" | TEXT="TEXT"
		//;
		public EnumRule getRule() { return rule; }
		
		//LINK="LINK" | TEXT="TEXT"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LINK="LINK"
		public EnumLiteralDeclaration getLINKEnumLiteralDeclaration_0() { return cLINKEnumLiteralDeclaration_0; }
		
		//"LINK"
		public Keyword getLINKLINKKeyword_0_0() { return cLINKLINKKeyword_0_0; }
		
		//TEXT="TEXT"
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_1() { return cTEXTEnumLiteralDeclaration_1; }
		
		//"TEXT"
		public Keyword getTEXTTEXTKeyword_1_0() { return cTEXTTEXTKeyword_1_0; }
	}
	public class BoolStringElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.BoolString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETRUEKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFALSEKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BoolString:
		//    TRUE="TRUE" | FALSE="FALSE"
		//;
		public EnumRule getRule() { return rule; }
		
		//TRUE="TRUE" | FALSE="FALSE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="TRUE"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"TRUE"
		public Keyword getTRUETRUEKeyword_0_0() { return cTRUETRUEKeyword_0_0; }
		
		//FALSE="FALSE"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"FALSE"
		public Keyword getFALSEFALSEKeyword_1_0() { return cFALSEFALSEKeyword_1_0; }
	}
	
	private final ProgramElements pProgram;
	private final InstructionElements pInstruction;
	private final NavigateToUrlElements pNavigateToUrl;
	private final CheckExistsElements pCheckExists;
	private final ClickOnElements pClickOn;
	private final CheckboxActionElements pCheckboxAction;
	private final FillFieldElements pFillField;
	private final StoreElementElements pStoreElement;
	private final ClickTypeElements eClickType;
	private final ElemTypeElements eElemType;
	private final BoolStringElements eBoolString;
	private final TerminalRule tURL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BadGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pInstruction = new InstructionElements();
		this.pNavigateToUrl = new NavigateToUrlElements();
		this.pCheckExists = new CheckExistsElements();
		this.pClickOn = new ClickOnElements();
		this.pCheckboxAction = new CheckboxActionElements();
		this.pFillField = new FillFieldElements();
		this.pStoreElement = new StoreElementElements();
		this.eClickType = new ClickTypeElements();
		this.eElemType = new ElemTypeElements();
		this.eBoolString = new BoolStringElements();
		this.tURL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.project.browserautomation.Bad.URL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.project.browserautomation.Bad".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//    instructions+=Instruction*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Instruction:
	//    NavigateToUrl | ClickOn | FillField | CheckExists | CheckboxAction | StoreElement
	//;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//NavigateToUrl:
	//    'NAV_TO' url=URL;
	public NavigateToUrlElements getNavigateToUrlAccess() {
		return pNavigateToUrl;
	}
	
	public ParserRule getNavigateToUrlRule() {
		return getNavigateToUrlAccess().getRule();
	}
	
	//CheckExists:
	//    'CHECK_EXISTS' type=ElemType id=STRING
	//    |
	//    "CHECK_EXISTS" type=ElemType "FROM" "VAR" varname=STRING
	//;
	public CheckExistsElements getCheckExistsAccess() {
		return pCheckExists;
	}
	
	public ParserRule getCheckExistsRule() {
		return getCheckExistsAccess().getRule();
	}
	
	//ClickOn:
	//    'CLICK_ON' type=ClickType (id=STRING | "VAR" + varname=STRING)
	//    |
	//    'CLICK_ON' type=ClickType "POS" pos_index=INT "IN" id=STRING
	//    |
	//    'CLICK_ON' type=ClickType id_combo=STRING "VALUE" to_select=STRING
	//    ;
	public ClickOnElements getClickOnAccess() {
		return pClickOn;
	}
	
	public ParserRule getClickOnRule() {
		return getClickOnAccess().getRule();
	}
	
	//CheckboxAction:
	//    "CHECKBOX_ACTION" bool=BoolString ("ALL" | actions+=STRING*)
	//;
	public CheckboxActionElements getCheckboxActionAccess() {
		return pCheckboxAction;
	}
	
	public ParserRule getCheckboxActionRule() {
		return getCheckboxActionAccess().getRule();
	}
	
	//FillField:
	//    'FILL_FIELD' "NAME" id=STRING "VALUE" (value=STRING | "FROM" "VAR" varname=STRING)
	//;
	public FillFieldElements getFillFieldAccess() {
		return pFillField;
	}
	
	public ParserRule getFillFieldRule() {
		return getFillFieldAccess().getRule();
	}
	
	//StoreElement:
	//    "STORE_ELEMENT" "POS" pos_index=INT "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
	//    |
	//    "STORE_ELEMENT" "FROM" id_from=STRING "PROP" prop_name=STRING "IN" "VAR" varname=STRING
	//;
	public StoreElementElements getStoreElementAccess() {
		return pStoreElement;
	}
	
	public ParserRule getStoreElementRule() {
		return getStoreElementAccess().getRule();
	}
	
	//enum ClickType:
	//    BUTTON="BUTTON" | LINK="LINK" | IMAGE="IMAGE" | COMBO="COMBO";
	public ClickTypeElements getClickTypeAccess() {
		return eClickType;
	}
	
	public EnumRule getClickTypeRule() {
		return getClickTypeAccess().getRule();
	}
	
	//enum ElemType:
	//    LINK="LINK" | TEXT="TEXT"
	//;
	public ElemTypeElements getElemTypeAccess() {
		return eElemType;
	}
	
	public EnumRule getElemTypeRule() {
		return getElemTypeAccess().getRule();
	}
	
	//enum BoolString:
	//    TRUE="TRUE" | FALSE="FALSE"
	//;
	public BoolStringElements getBoolStringAccess() {
		return eBoolString;
	}
	
	public EnumRule getBoolStringRule() {
		return getBoolStringAccess().getRule();
	}
	
	//terminal URL:
	//    'http' 's'? '://' ('www.')? ('-'|'.'|'+'|'~'|'#'|'='|'%'|'_'|'@'|':'|'a'..'z'|'A'..'Z'|'0..9')+
	//    '.' ('a'..'z' | 'A'..'Z' | '0'..'9' | '(' | ')')+
	//    (('-' | '.' | '+' | '~' | '#' | '=' | '%' | '_' | '@' | ':' | '/' | '?' | '&' | 'a'..'z' | 'A'..'Z' | '0'..'9' | '(' | ')')* );
	public TerminalRule getURLRule() {
		return tURL;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
