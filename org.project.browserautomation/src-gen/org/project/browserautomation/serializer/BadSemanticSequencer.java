/*
 * generated by Xtext 2.36.0
 */
package org.project.browserautomation.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.project.browserautomation.bad.BadPackage;
import org.project.browserautomation.bad.CheckExists;
import org.project.browserautomation.bad.CheckboxAction;
import org.project.browserautomation.bad.ClickOn;
import org.project.browserautomation.bad.FillField;
import org.project.browserautomation.bad.NavigateToUrl;
import org.project.browserautomation.bad.Program;
import org.project.browserautomation.bad.StoreElement;
import org.project.browserautomation.services.BadGrammarAccess;

@SuppressWarnings("all")
public class BadSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BadGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BadPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BadPackage.CHECK_EXISTS:
				sequence_CheckExists(context, (CheckExists) semanticObject); 
				return; 
			case BadPackage.CHECKBOX_ACTION:
				sequence_CheckboxAction(context, (CheckboxAction) semanticObject); 
				return; 
			case BadPackage.CLICK_ON:
				sequence_ClickOn(context, (ClickOn) semanticObject); 
				return; 
			case BadPackage.FILL_FIELD:
				sequence_FillField(context, (FillField) semanticObject); 
				return; 
			case BadPackage.NAVIGATE_TO_URL:
				sequence_NavigateToUrl(context, (NavigateToUrl) semanticObject); 
				return; 
			case BadPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case BadPackage.STORE_ELEMENT:
				sequence_StoreElement(context, (StoreElement) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns CheckExists
	 *     CheckExists returns CheckExists
	 *
	 * Constraint:
	 *     ((type=ElemType id=STRING) | (type=ElemType varname=STRING))
	 * </pre>
	 */
	protected void sequence_CheckExists(ISerializationContext context, CheckExists semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns CheckboxAction
	 *     CheckboxAction returns CheckboxAction
	 *
	 * Constraint:
	 *     (bool=BoolString actions+=STRING*)
	 * </pre>
	 */
	protected void sequence_CheckboxAction(ISerializationContext context, CheckboxAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns ClickOn
	 *     ClickOn returns ClickOn
	 *
	 * Constraint:
	 *     ((type=ClickType (id=STRING | varname=STRING)) | (type=ClickType pos_index=INT id=STRING) | (type=ClickType id_combo=STRING to_select=STRING))
	 * </pre>
	 */
	protected void sequence_ClickOn(ISerializationContext context, ClickOn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns FillField
	 *     FillField returns FillField
	 *
	 * Constraint:
	 *     (id=STRING (value=STRING | varname=STRING))
	 * </pre>
	 */
	protected void sequence_FillField(ISerializationContext context, FillField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns NavigateToUrl
	 *     NavigateToUrl returns NavigateToUrl
	 *
	 * Constraint:
	 *     url=URL
	 * </pre>
	 */
	protected void sequence_NavigateToUrl(ISerializationContext context, NavigateToUrl semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BadPackage.Literals.NAVIGATE_TO_URL__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BadPackage.Literals.NAVIGATE_TO_URL__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNavigateToUrlAccess().getUrlURLTerminalRuleCall_1_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     instructions+=Instruction+
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Instruction returns StoreElement
	 *     StoreElement returns StoreElement
	 *
	 * Constraint:
	 *     ((pos_index=INT id_from=STRING prop_name=STRING varname=STRING) | (id_from=STRING prop_name=STRING varname=STRING))
	 * </pre>
	 */
	protected void sequence_StoreElement(ISerializationContext context, StoreElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
